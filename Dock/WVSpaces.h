/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class NSArray, NSMutableArray, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, WVDashboardSpace, WVFullscreenStatusItem, WVSpace, WVSpaceSwitcher;

@interface WVSpaces : NSObject
{
    NSObject<OS_dispatch_source> *_swooshCompletionTimer;
    NSObject<OS_dispatch_source> *_windowOrderTimer;
    NSObject<OS_dispatch_queue> *_preferenceQueue;
    NSMutableArray *_spaces;
    NSMutableArray *_userSpaces;
    unsigned long long _spaceIndex;
    WVDashboardSpace *_dashboardSpace;
    NSMutableDictionary *_appToSpaceTable;
    BOOL _performingJumpToAnimation;
    BOOL _bringSpacesToCurrentSpace;
    BOOL _preventMRUForNextCall;
    NSMutableArray *_delayedSpaceChanges;
    WVSpaceSwitcher *_spaceSwitcher;
    double _startPosition;
    NSObject<OS_dispatch_queue> *_switcherQueue;
    NSObject<OS_dispatch_source> *_switcherUpdateSource;
    NSObject<OS_dispatch_source> *_switcherUpdateTimer;
    float _switcherScrollProgress;
    BOOL _fluidSwitching;
    unsigned int _startGestureCount;
    NSObject<OS_dispatch_source> *_messageTracerDailyTimer;
    unsigned long long _maxFullScreenSpaces;
    unsigned long long _maxSpaces;
    WVSpace *_lastSpace;
    WVFullscreenStatusItem *_fullscreenStatusItem;
}

@property(nonatomic) BOOL bringSpacesToCurrentSpace; // @synthesize bringSpacesToCurrentSpace=_bringSpacesToCurrentSpace;
@property(nonatomic) BOOL preventMRUForNextCall; // @synthesize preventMRUForNextCall=_preventMRUForNextCall;
@property(readonly, nonatomic) BOOL fluidSwitching; // @synthesize fluidSwitching=_fluidSwitching;
@property(readonly, nonatomic) WVSpace *dashboardSpace; // @synthesize dashboardSpace=_dashboardSpace;
@property(readonly, nonatomic) unsigned long long currentSpaceIndex; // @synthesize currentSpaceIndex=_spaceIndex;
@property(readonly, nonatomic) NSArray *userSpaces; // @synthesize userSpaces=_userSpaces;
@property(readonly, nonatomic) NSArray *spaces; // @synthesize spaces=_spaces;
- (void)_updateSpaceNames;
- (id)_bindingForUUID:(id)arg1;
- (void)_windowOrderedOutOnNonVisibleSpaceNotification:(id)arg1;
- (void)_windowOrderedInOnNonVisisbleSpaceNotification:(id)arg1;
- (void)mainDisplayScaleFactorChanged;
- (id)fadeInFloaterForPSN:(struct CPSProcessSerNum)arg1 onSpace:(id)arg2;
- (void)performDelayedSpaceChanges;
- (void)addDelayedSpaceChange:(id)arg1;
- (void)_finalizeSpaceSwitch:(BOOL)arg1 stickyWindows:(CDStruct_21f6099b)arg2 previousSpaceDashboard:(BOOL)arg3 forSpace:(id)arg4;
- (void)_stopDirectScroll:(BOOL)arg1 velocity:(double)arg2 forward:(BOOL)arg3 startGestureCount:(unsigned int)arg4;
- (void)_startDirectScroll:(id)arg1 systemControlValues:(const float *)arg2 draggedWindow:(unsigned int)arg3;
- (void)_updateScrollPosition;
- (struct CPSProcessSerNum)setCurrentPSNAndFocus:(id)arg1 draggedWindow:(id)arg2 process:(struct CPSProcessSerNum *)arg3 selectedWindow:(unsigned int *)arg4 forSpace:(id)arg5;
- (struct CPSProcessSerNum)_setCurrentPSNAndFocusInternal:(id)arg1 draggedWindow:(id)arg2 process:(struct CPSProcessSerNum *)arg3 selectedWindow:(unsigned int *)arg4 stickyWindows:(CDStruct_21f6099b *)arg5 forSpace:(id)arg6;
- (void)_registerAppTableWithWindowServer;
- (void)_updateApplicationWorkspace;
- (id)_bindingIdentifierForAppInfo:(id)arg1;
- (void)_saveSpacesToDisk;
- (void)moveSpace:(id)arg1 toIndex:(unsigned long long)arg2;
- (void)fluidGestureSwipe:(struct _CGSEventRecord)arg1 progress:(float)arg2;
- (void)fluidGestureStop:(struct _CGSEventRecord)arg1 canceled:(BOOL)arg2 velocity:(double)arg3 forward:(BOOL)arg4;
- (void)fluidGestureStart:(struct _CGSEventRecord)arg1;
- (void)removeUserSpace:(id)arg1;
- (id)addUserSpace;
- (BOOL)canAddUserSpace;
- (void)setBinding:(id)arg1 forBundleID:(id)arg2;
- (id)bindingForBundleID:(id)arg1;
- (void)spaceModifedWhenNotFront:(id)arg1;
- (void)dashboardPIDRemoved:(int)arg1;
- (void)dashboardPIDAdded:(int)arg1;
- (void)enableDashboardSpace;
- (void)disableDashboardSpace;
- (id)spaceWithUUID:(id)arg1;
- (id)spaceAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfSpace:(id)arg1;
- (void)setSpaceIndexOutsideOfSpaces:(unsigned long long)arg1;
- (struct CGRect)rectForOffscreenWindow:(struct CGRect)arg1 space:(id)arg2 displaySize:(struct CGSize)arg3;
- (BOOL)switchToSpaceForApplicationLaunch:(id)arg1 psn:(struct CPSProcessSerNum)arg2;
- (BOOL)switchToSpaceAtIndex:(unsigned long long)arg1 fromServer:(BOOL)arg2 updatePSN:(BOOL)arg3;
- (BOOL)switchToNextSpaceForApplication:(struct CPSProcessSerNum)arg1;
- (BOOL)switchToSpaceWithUUID:(id)arg1;
- (BOOL)switchToUserSpace:(unsigned long long)arg1;
- (BOOL)switchToNextSpace:(BOOL)arg1;
- (BOOL)switchToPreviousSpace:(BOOL)arg1;
- (void)switchToLastSpace;
- (void)switchForWindowDrag:(BOOL)arg1;
@property(readonly, nonatomic) BOOL dashboardIsCurrent; // @dynamic dashboardIsCurrent;
@property(readonly, nonatomic) BOOL currentSpaceIsDashboard; // @dynamic currentSpaceIsDashboard;
@property(readonly, nonatomic) unsigned long long firstUserSpaceIndex; // @dynamic firstUserSpaceIndex;
@property(readonly, nonatomic) BOOL anySwitchingOccuring; // @dynamic anySwitchingOccuring;
@property(readonly, nonatomic) NSArray *orderedUsersSpaces; // @dynamic orderedUsersSpaces;
@property(readonly, nonatomic) WVSpace *mainSpace; // @dynamic mainSpace;
@property(readonly, nonatomic) WVSpace *previousSpace; // @dynamic previousSpace;
@property(readonly, nonatomic) WVSpace *nextSpace; // @dynamic nextSpace;
@property(readonly, nonatomic) WVSpace *currentSpace; // @dynamic currentSpace;
- (id)init;
- (void)_jumpToFirstSpace;
- (void)_msgRemovePidForDashboard:(id)arg1 dictionary:(id)arg2;
- (void)_msgAddPidForDashboard:(id)arg1 dictionary:(id)arg2;
- (void)_msgActivateNoWindowsInFullscreenSpace:(id)arg1 dictionary:(id)arg2;
- (void)_msgSetRestoreState:(id)arg1 dictionary:(id)arg2;
- (void)_msgRemoveFullscreenSpace:(id)arg1 dictionary:(id)arg2;
- (void)_msgAssociatePids:(id)arg1 dictionary:(id)arg2;
- (void)_msgCreateFullscreenSpace:(id)arg1 dictionary:(id)arg2;
- (void)_msgSetNameOfFullscreen:(id)arg1 dictionary:(id)arg2;
- (void)_msgTakeWindowToNewSpace:(id)arg1 dictionary:(id)arg2;
- (void)_msgLeaveFullscreen:(id)arg1 dictionary:(id)arg2;
- (void)_msgTakeFullscreen:(id)arg1 dictionary:(id)arg2;
- (void)_acceptConnection:(id)arg1;
- (void)appOrderedFrontWithNoWindows:(int)arg1;
- (BOOL)isPidFullscreen:(int)arg1;
- (void)applicationDied:(int)arg1;
- (void)initializeFullscreen;

@end

